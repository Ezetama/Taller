program ej4p4;

type
  dias= 1..31;
  meses= 1..12;
  prestamo= record
    isbn: integer;
    socio: integer;
    dia: dias;
    mes: meses;
    periodo: integer;
  end;
  
  dato= record
    isbn: integer;
    cant: integer;
  end;
  arbol3= ^nodoarbol3;
  
  nodoarbol3= record
    elem: dato;
    hi: arbol3;
    hd: arbol3;
  end;
  
  arbol1= ^nodoArbol1;
  
  nodoArbol1 = record
    elem: prestamo;
    hi: arbol1;
    hd: arbol1;
  end;
  
  elemento= record
    socio: integer
    dia: dias;
    mes: meses;
    periodo: integer;
  end;
  lista= ^nodo;
  
  nodo= record
    elem: elemento;
    sig: lista;
  end;
  arbol2= ^nodoArbol2;
  
  nodoArbol2= record
    isbn: integer;
    elem: lista;
    hi: arbol2;
    hd: arbol2;
  end;
  
procedure leerPrestamo (var p: prestamo);
begin
  writeln ('Ingrese ISBN del libro');
  readln (p.isbn);
  if (p.isbn<>0) then begin
    writeln ('Ingrese numero de socio del cliente');
    readln (p.nSocio);
    writeln ('Ingrese dia del prestamo');
    readln (p.dia);
    writeln ('Ingrese mes del prestamo');
    readln (p.mes);
    writeln ('Ingrese duracion del prestamo');
    readln (p.periodo);
  end;
end;
procedure agregarArbol1 (var a1: arbol1; p: producto);
begin
  if (a1=nil) then begin
    new (a1);
    a1^.elem:=p;
    a1^hi:=nil;
    a1^hd:=nil;
  end
  else begin
    if p.isbn>=a1^.elem.isbn then
      agregarArbol1 (a1^.hd)
    else
      agregarArbol1(a1^.hi)
end;
procedure transformar (p: producto; var e: elemento; var isbn: integer);
begin
  isbn:=p.isbn;
  e.socio:= p.socio;
  e.dia:= p.dia;
  e.mes:=p.dia;
  e.periodo:=p.periodo;
end;
procedure agregarLista (var l: lista; e: elemento);
var
  aux: lista;
begin
  new (aux);
  aux^.elem:=e;
  aux^.sig:=l;
  l:=aux;
end;
procedure agregarArbol2 (var a2: arbol2; e: elemento; isbn: integer);
  
begin
  if (a2= nil) then begin
    new (a2);
    a2^.hi:=nil;
    a2^.hd:=nil;
    a2^.isbn:=isbn;
    a2^.elem:=nil;
    agregarLista (a2^.elem,e);
  end
  else begin
    if (isbn>a2^.isbn) then
      agregarArbol2 (a2^.hd,e,isbn);
    else
      if (isbn<a2^.isbn) then
        agregarArbol2 (a2^.hi,e,isbn);
      else
        agregarLista (a2^.elem,e);
  end;
end;
procedure crearArboles (var a1: arbol1; var a2: arbol2);
var
  p: prestamo;
  e: elemento;
  isbn: integer;
begin
  leerPrestamo(p);
  while (p.isbn<>0) do begin
    agregarArbol1 (a1,p);
    transformar (p,e,isbn);
    agregarArbol2 (a2,e,isbn);
    leerPrestamo(p);
  end;
end;
procedure buscarMax (a1: arbol1; isbnMax: integer);
begin
  if (a1<>nil) then begin
    if (a1^.hd<>nil) then
      buscarMax (a1^.hd,isbnMax);
    else
      isbnMax:= a1^.elem.isbn;
  end;
end;
procedure buscarMin (a2: arbol2; isbnMin: integer);
begin
  if (a1<>nil) then begin
    if (a2^.hi<>nil) then
      buscarMin (a2^.hi,isbnMax);
    else
      isbnMin:=a2^.isbn;
  end;
end;
procedure chequearSocio (a1: arbol1; num: integer; var cant: integer);

begin
  if (a<>nil) then begin
    if (a1^.elem.socio=isbn) then
      cant:=cant+1;
    chequearSocio(a1^.hi);
    chequearSocio(a1^.hd);
  end;
end;
procedure recorrerLista (l:lista; num:integer; var cant: integer);
begin
  while (l<>nil) do begin
    if (num=l^.elem.socio) then
      cant:=cant+1;
    l:=l^.sig;
  end;
end;

procedure chequearSocio2 (var a2: arbol2; num: integer; var cant: integer);
begin
  if (a2<>nil) then begin
    recorrerLista (a2^.elem,num,cant);
    chequearSocio2(a2^.hi);
    chequearSocio2(a2^.hd);
  end;
end;
procedure agregarArbol3 (isbn: integer; var a3:arbol3);
begin
  if (a3=nil) then begin
	 new (a3);
     a3^.elem.isbn:=isbn;
     a3^.elem.cant:=1;
     a3^.hi:=nil;
     a3^.hd:=nil;
  end
  else begin
    if (isbn=a3^.elem.isbn) then
      a3^.elem.cant:=a3^.elem.cant+1
    if (isbn<a3^.elem.isbn) then
      agregarArbol3 (isbn,a3^.hi)
    else
      agregarArbol3 (isbn,a3^.hd)
    
end;
procedure armarArbol3 (a1: arbol1; var a3: arbol3);
begin
  if (a1<>nil) then begin
    agregarArbol3 (a1^.elem.isbn,a3);
    armarArbol3 (a1^.hi);
    armarArbol3 (a1^.hd);
  end;
end;
procedure recorrerLista2 (l: lista; var cant: integer);
begin
  while (l<>nil) do begin
    cant:=cant+1;
    l:=l^.sig;
  end;
end;
procedure agregarArbol32 (isbn: integer; l: lista; var a32: arbol3);
var
  aux: integer;
begin
  if (a32=nil) then begin
    new (a32);
    a32^.hi:=nil;
    a32^.hd:=nil;
    a32^.elem.isbn:=isbn;
    recorrerLista2 (l,aux);
    a32^.elem.cant:=aux;
  end
  else begin
    if (isbn>a32^.elem.isbn) then begin
      agregarArbol32 (isbn,l,a32^.hd);
    else
      agregarArbol32 (isbn,l,a32^.hi);
  end;
end;

procedure armarArbol32 (a2: arbol2; var a32: arbol3);
begin
  if (a2<>nil) then begin
    agregarArbol3 (a2^.isbn,a2^.elem,a32);
end;
procedure imprimirArbol32 (a3: arbol3);
begin
  if a3<>nil then begin
    writeln ('El ISBN del libro es ',a3^.elem.isbn,' y fue prestado unas ',a3^.elem.cant,' veces');
    imprimirArbol32 (a3^.hi);
    imprimirArbol32 (a3^.hd);
  end;
end;
var
  a1: arbol1;
  a2: arbol2;
  a3,a32: arbol3;
  isbnMax,isbnMin,num,cant: integer;
begin
  a2:=nil;
  a1:=nil;
  crearArboles (a1,a2);
  buscarMax (a1,isbnMax);
  writeln ('El isbn de mayor tamanio es : ',ibnMax);
  buscarMin (a2,isbnMin);
  writeln ('El isdbn de menor tamanio es: ',isbnMin);
  wrtiteln ('Ingrese el numero de socio del que quiere saber la cantidad de prestamos que hizo');
  readln (num);
  cant:=0;
  chequearSocio (a1,num,cant);
  writeln ('El socio ',num,' hizo ',cant,' prestamos');
  cant:=0;
  wrtiteln ('Ingrese el numero de socio del que quiere saber la cantidad de prestamos que hizo');
  readln (num);
  chequearSocio2 (a2,num,cant);
  a3:=nil;
  armarArbol3 (a1,a3);
  armarArbol32 (a1,a32);
  imprimirArbol32(a32);
end.
